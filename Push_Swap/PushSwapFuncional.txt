#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<stddef.h>
#include "ft_printf/ft_printf.h"

typedef struct s_node {
    int value;
    struct s_node* next;
} t_node;

void printError(int error) {
    if (error == 0)
        ft_printf("Error doble '-'");
    ft_printf("\n");
}

t_node* new_node(int value) {
    t_node* node = (t_node*)malloc(sizeof(t_node));
    if (!node)
        return NULL;
    node->value = value;
    node->next = NULL;
    return node;
}

void push(t_node** stack, int value) {
    t_node* node = new_node(value);
    if (!node)
        return;
    node->next = *stack;
    *stack = node;
}

int pop(t_node** stack) {
    if (*stack == NULL) {
        return -1; // Indica que la pila está vacía
    }
    t_node* temp = *stack;
    int value = temp->value;
    *stack = (*stack)->next;
    free(temp);
    return value;
}

void print_stack(t_node* stack) {
    while (stack != NULL) {
        ft_printf("%d ", stack->value);
        stack = stack->next;
    }
    ft_printf("\n");
}

// Función para intercambiar los dos primeros elementos de una pila
void swap(t_node** stack, char* operation) {
    if (*stack == NULL || (*stack)->next == NULL)
        return;
    t_node* first = *stack;
    t_node* second = first->next;
    first->next = second->next;
    second->next = first;
    *stack = second;
    ft_printf("%s ", operation); // Imprime la operación
}

// Función para mover el primer elemento de una pila a otra
void push_to(t_node** from, t_node** to, char* operation) {
    if (*from == NULL)
        return;
    int value = pop(from);
    push(to, value);
    ft_printf("%s ", operation); // Imprime la operación
}

// Función para rotar una pila hacia arriba
void rotate(t_node** stack, char* operation) {
    if (*stack == NULL || (*stack)->next == NULL)
        return;
    t_node* first = *stack;
    *stack = first->next;
    first->next = NULL;
    t_node* last = *stack;
    while (last->next != NULL)
        last = last->next;
    last->next = first;
    ft_printf("%s ", operation); // Imprime la operación
}

// Función para rotar una pila hacia abajo
void reverse_rotate(t_node** stack, char* operation) {
    if (*stack == NULL || (*stack)->next == NULL)
        return;
    t_node* last = *stack;
    t_node* prev = NULL;
    while (last->next != NULL) {
        prev = last;
        last = last->next;
    }
    prev->next = NULL;
    last->next = *stack;
    *stack = last;
    ft_printf("%s ", operation); // Imprime la operación
}

// Función para encontrar el valor mínimo en una pila
int find_min(t_node* stack) {
    int min_value = stack->value;
    while (stack != NULL) {
        if (stack->value < min_value) {
            min_value = stack->value;
        }
        stack = stack->next;
    }
    return min_value;
}

// Función para verificar si la pila está ordenada
int is_sorted(t_node* stack) {
    while (stack != NULL && stack->next != NULL) {
        if (stack->value > stack->next->value) {
            return 0; // No está ordenada
        }
        stack = stack->next;
    }
    return 1; // Está ordenada
}

// Función para ordenar stack_a usando stack_b
void sort_stack(t_node** stack_a, t_node** stack_b) {
    // Si la pila ya está ordenada, no hacer nada
    if (is_sorted(*stack_a)) {
        return;
    }

    // Mover todos los elementos de stack_a a stack_b
    while (*stack_a != NULL) {
        push_to(stack_a, stack_b, "pb");
    }

    // Mover los elementos de stack_b a stack_a en orden
    while (*stack_b != NULL) {
        // Encontrar el elemento más pequeño en stack_b
        int min_value = find_min(*stack_b);

        // Mover elementos a stack_a hasta encontrar el mínimo
        while ((*stack_b)->value != min_value) {
            rotate(stack_b, "rb");
        }

        // Mover el mínimo a stack_a
        push_to(stack_b, stack_a, "pa");
    }
}

int main(int argc, char* argv[]) {
    t_node* stack_a = NULL;
    t_node* stack_b = NULL;
    int i;
    int j;

    i = 1;
    j = 0;
    // Agregar elementos a la pila A desde los argumentos
    while (i < argc) {
        j = 0;
        while (argv[i][j]) {
            if (argv[i][j] == '-' && argv[i][j + 1] == '-') {
                return (printError(0), 0);
            }
            j++;
        }
        push(&stack_a, atoi(argv[i++]));
    }

    ft_printf("Pila A original: ");
    print_stack(stack_a);

    // Ordenar la pila A
    ft_printf("Aqui estan los sorting steps: ");
    sort_stack(&stack_a, &stack_b);
    ft_printf("\n");

    ft_printf("Pila A ordenada: ");
    print_stack(stack_a);

    // Liberar la memoria de las pilas
    while (stack_a != NULL) {
        pop(&stack_a);
    }
    while (stack_b != NULL) {
        pop(&stack_b);
    }
    return 0;
}